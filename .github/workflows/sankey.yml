name: Generate Sankey Diagram Daily

on:
  schedule:
    - cron: '0 0 * * *' # Runs every day at midnight
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  generate-sankey:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas

      - name: Load CSV and Generate Sankey Diagram
        shell: /usr/bin/bash -e {0}
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.12.7/x64
          PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.7/x64/lib/pkgconfig
          Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.7/x64
          Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.7/x64
          Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.7/x64
          LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.7/x64/lib
        run: |
          python -c """
import pandas as pd

# Load the CSV file
df = pd.read_csv('platform_counts.csv')

# Convert the 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# Drop rows with NaT or NaN in 'Date' or 'Language' columns
df_cleaned = df.dropna(subset=['Date', 'Language'])

# Get the most recent date in the cleaned dataset
most_recent_date = df_cleaned['Date'].max()

# Filter the dataframe to only include rows from the most recent date
most_recent_df = df_cleaned[df_cleaned['Date'] == most_recent_date]

# Normalize Bilingual and Bilingue to a single label
most_recent_df['Language'] = most_recent_df['Language'].replace({'Bilingual': 'Bilingual + Bilingue', 'Bilingue': 'Bilingual + Bilingue'})

# Group by Language and Platform, and sum the counts
grouped_df = most_recent_df.groupby(['Language', 'Platform'])['Count'].sum().reset_index()

# Create the Sankey diagram input based on the grouped data
sankey_lines = ['sankey-beta']

# Add language to platform connections
for _, row in grouped_df.iterrows():
    sankey_lines.append(f"  {row['Language']},{row['Platform']},{row['Count']}")

# Write the Sankey diagram to a file
with open('sankey_diagram.txt', 'w') as f:
    f.write("\n".join(sankey_lines))
          """

      - name: Commit and Push Sankey Diagram
        run: |
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git add sankey_diagram.txt
          git commit -m "Update Sankey diagram for the most recent day"
          git push
